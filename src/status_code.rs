#[repr(u16)]
#[derive(Debug)]
pub enum StatusCode {
    Continue = 100,
    SwitchingProtocols = 101,
    Processing = 102,
    EarlyHints = 103,

    Ok = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInfo = 203,
    NoContext = 204,
    ResetContent = 205,
    PartialContent = 206,
    MultiStatus = 207,
    AlreadyReported = 208,
    IMUsed = 226,

    MultipleChoices = 300,
    MovedPermanently = 301,
    Found = 302,
    SeeOther = 303,
    NotModified = 304,
    TemporaryRedirect = 307,
    PermanentRedirect = 308,

    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    PayloadTooLarge = 413,
    URITooLong = 414,
    UnsupportedMediaType = 415,
    RangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    ImATeapot = 418,
    MisdirectedRequest = 421,
    UnprocessableContent = 422,
    Locked = 423,
    FailedDependency = 424,
    TooEarly = 425,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    UnavailableForLegalReasons = 451,

    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HTTPVersionNotSupported = 505,
    VariantAlsoNegotiates = 506,
    InsufficientStorage = 507,
    LoopDetected = 508,
    NotExtended = 510,
    NetworkAuthenticationRequired = 511,
}

impl Default for StatusCode {
    fn default() -> Self { Self::Ok }
}

impl From<&str> for StatusCode {
    fn from(value: &str) -> Self {
        match value {
            "100 Continue" => Self::Continue,
            "101 Switching Protocols" => Self::SwitchingProtocols,
            "102 Processing" => Self::Processing,
            "103 Early Hints" => Self::EarlyHints,
            "200 OK" => Self::Ok,
            "201 Created" => Self::Created,
            "202 Accepted" => Self::Accepted,
            "203 Non Authorative Info" => Self::NonAuthoritativeInfo,
            "204 No Context" => Self::NoContext,
            "205 Reset Content" => Self::ResetContent,
            "206 Partial Content" => Self::PartialContent,
            "207 Multi Status" => Self::MultiStatus,
            "208 Already Reported" => Self::AlreadyReported,
            "226 IM Used" => Self::IMUsed,
            "300 Multiple Choices" => Self::MultipleChoices,
            "301 Moved Permanently" => Self::MovedPermanently,
            "302 Found" => Self::Found,
            "303 See Other" => Self::SeeOther,
            "304 Not Modified" => Self::NotModified,
            "307 Temporary Redirect" => Self::TemporaryRedirect,
            "308 Permanent Redirect" => Self::PermanentRedirect,
            "400 Bad Request" => Self::BadRequest,
            "401 Unauthorized" => Self::Unauthorized,
            "402 Payment Required" => Self::PaymentRequired,
            "403 Forbidden" => Self::Forbidden,
            "404 Not Found" => Self::NotFound,
            "405 Method Not Allowed" => Self::MethodNotAllowed,
            "406 Not Acceptable" => Self::NotAcceptable,
            "407 Proxy Authentication Required" => Self::ProxyAuthenticationRequired,
            "408 Request Timeout" => Self::RequestTimeout,
            "409 Conflict" => Self::Conflict,
            "410 Gone" => Self::Gone,
            "411 Length Required" => Self::LengthRequired,
            "412 Precondition Failed" => Self::PreconditionFailed,
            "413 Payload Too Large" => Self::PaymentRequired,
            "414 URI Too Long" => Self::URITooLong,
            "415 Unsupported Media Type" => Self::UnsupportedMediaType,
            "416 Range Not Satisfiable" => Self::RangeNotSatisfiable,
            "417 Expectation Failed" => Self::ExpectationFailed,
            "418 Im A Teapot" => Self::ImATeapot,
            "421 Misdirected Request" => Self::MisdirectedRequest,
            "422 Unprocessable Content" => Self::UnprocessableContent,
            "423 Locked" => Self::Locked,
            "424 Failed Dependency" => Self::FailedDependency,
            "425 Too Early" => Self::TooEarly,
            "426 Upgrade Required" => Self::UpgradeRequired,
            "428 Precondition Required" => Self::PreconditionRequired,
            "429 Too Many Requests" => Self::TooManyRequests,
            "431 Request Header Fields Too Large" => Self::RequestHeaderFieldsTooLarge,
            "451 Unavailable For Legal Reasons" => Self::UnavailableForLegalReasons,
            "500 Internal Server Error" => Self::InternalServerError,
            "501 Not Implemented" => Self::NotImplemented,
            "502 Bad Gateway" => Self::BadGateway,
            "503 Service Unavailable" => Self::ServiceUnavailable,
            "504 Gateway Timeout" => Self::GatewayTimeout,
            "505 HTTP Version Not Supported" => Self::HTTPVersionNotSupported,
            "506 Variant Also Negotiates" => Self::VariantAlsoNegotiates,
            "507 Insufficient Storage" => Self::InsufficientStorage,
            "508 Loop Detected" => Self::LoopDetected,
            "510 Not Extended" => Self::NotExtended,
            "511 Network Authentication Required" => Self::NetworkAuthenticationRequired,
            _ => Self::NotFound

        }
    }
}
